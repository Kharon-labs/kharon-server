signup:1 Access to fetch at 'https://kharon-server.onrender.com/api/v1/auth/signup' from origin 'https://kharon-frontend.vercel.app' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: The 'Access-Control-Allow-Origin' header has a value 'https://kharon-frontend.vercel.app/' that is not equal to the supplied origin. Have the server send the header with a valid value, or, if an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.

response message.

const express = require("express");
const helmet = require("helmet");
const cors = require("cors");
const path = require("path");
require('dotenv').config();

let clientUrl = process.env.CLIENT_URL || 'http://localhost:3000';

const app = express();
app.use(helmet());

let corsOptions = {
    origin: clientUrl,
}
app.use(cors(corsOptions));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(express.static(path.join(__dirname, "public")));
app.use("/api/v1/auth", require("./Routes/auth.route"));
app.use("/api/v1", require("./Routes/routes.route"));

app.use((error, req, res, next) => {
    const statusCode = error.status || 500;
    console.log(error);
    console.log(`${req.method}, ${req.url}`);
    res.status(statusCode).json({ error: error.message });
});

module.exports = app;

the app.js code

CLIENT_URL=https://kharon-frontend.vercel.app/
client url from the env file.

why am I still getting the CORS error and what is the solution?

Hint: Server code below:

const fs = require("fs");
const path = require("path");
const app = require("./app");
const https = require("https");
const express = require("express");
const passport = require("passport");
const session = require('express-session');
const MongoStore = require('connect-mongo');
const authRoutes = require("./Routes/routes.route");
const { mongoConnect } = require("./Services/mongo");

require("dotenv").config();
require("express-async-errors");

const PORT = process.env.PORT || 8081;
const SESSION_SECRET = process.env.SESSION_SECRET;
const MONGO_URL = process.env.MONGO_DB_URL;

require("./Auth/google.auth")(passport); // to load google oauth strategy

app.use(
  session({
    secret: SESSION_SECRET || "SecretKey",
    resave: false, 
    saveUninitialized: false, 
    store: MongoStore.create({
      mongoUrl: MONGO_URL, 
      collectionName: 'sessions'
    }),
    cookie: {
      maxAge: 1000 * 60 * 60 * 12, // 1 day
    },
  })
);

app.use(passport.initialize());
app.use(passport.session());

app.use(express.static(path.join(__dirname, "../public")));

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "../public", "index.html"), (err) => {
    if (err) {
      console.log("Error serving file", err);
      res.status(500).send("Error serving file");
    }
  });
});

app.use("/user", authRoutes);

/*
const server = https.createServer(
  {
    // key: fs.readFileSync("key.pem"),
    // cert: fs.readFileSync("cert.pem"),
  },
  app
);
*/

async function startServer() {
  await mongoConnect();

  app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}...`);
  });
}

startServer();

module.exports = app;

Hint 2: backend deployed on render